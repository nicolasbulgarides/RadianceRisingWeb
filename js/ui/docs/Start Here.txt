A good UI system is flexible and modular.

In our game Engine, both the gameplay / game world and UI is displayed on "Scenes" where are rendered, with some Scenes having 3d elements, and some Scenes having 2d elements,
and some Scenes having both 3d and 2d elements. It is also possible, and often useful / advisable, to have separate Scenes which are layered in a specific draw order / render order.

Most of the time, there may be "ActiveGameLayer" (at the bottom) and "ActiveUILayer", (an overlay). In a space fighter,
you may see through the window of a cockpit a dynamic space field - but at the bottom of the screen might be your cockpit button panel.
You would certainly separate these into different scenes, so that you can do such things as add new buttons as you upgrade your ship.

There may be scenarios in your game where you have more than one UI layer (meaning 3 draw lawyers total, or, theoretically, more). 
2 is very common, 3 or 4 is possible but is not ideal. At the end of this document is a list of scenarios in which
having more than 2 ui layers might be useful or even advisable or necessary. That being said, 2 UI layers + 1 game layer is the most common and recommended configuration, specifically
designed for convenience and ease of use. Note you can achieve the same effect as having 2 UI layers simply by manipulating draw order for individual nodes or containers with multiple nodes.
If this ends up being necessary for performance reasons, that's ok. But lightweight UI layers, two of them, seems like a good starting practice. If you follow the designed
architecture / framework for assembling complex UI, you can always just move over your custom node from one UI Layer to the other, and the deactivate / skip / disable the 2nd UI layer. 
If you're not a fuck up, you will almost certainly never have a problem with transitioning from 2 UI Layers to 1. Hyper-modular design and flexibility is our foundational strategy. 
The scene is paper, a UI element or node is a coin that can be freely moved around the paper. If you have somehow glued your coin to the paper, you did something wrong.
Combining scenes is like using cut outs on multiple pieces of paper for special effects / various reasons. Always think before you code.

Having discussed "Scenes", "Draw Order / Render Layer", and the general usefulness of there being 2 UI layers and a single game layer, here are some other things worth noting.

0. Please note that complex nodes, in our framework, are called "composite", and that a composite node can contain other nodes. Complex scenes may be made of multiple or numerous composite nodes. 
Each composite note is, in our best practices, created and designed as a separate javascript class. Could you do a JSON based alternate system that skips class files, yes, but I am not crazy about 
looking through JSON to make changes. Instead, I like there to be one file - one class - for one fundamental UI element (be it simple or complex / composite). Note that all of our specialized nodes
inherit from the class "CustomUINodeAbstractTemplate". Note that every custom UI Node, each variation of the base template, has a corresponding "Schematic". The schematic is the set of instructions
needed for the UI node to be assembled correctly. It's a little over-engineered / complex, by design. The template, such as "PlayerFriendsListPopUp.js", has a "nickname" or "id", and this 
nickname has a 1 to 1 relationship with the appropriate schematic needed to assemble the node. Note there is a bypass / simplification setup for "easy" nodes. On the other hand, a really complex
node, such as a "GuildHallChatLobby", where different players can talk to each other live, might have a single class / .js file, but the creation of that entire complex arrangement of UI elements
may justify a separate object known as the "AssemblyProcess". A schematic is the instructions needed to make a single, self-contained but somewhat complex UI node. A process, which may not end up being needed,
is a way to handle MULTIPLE distinct assembly processes for highly, vaguely or barely related nodes. In a a polished "World Leaderboards Page", you could envision that different top players
have different profile photos, achievements / rankings / metrics, or, if you're really clever, they could even pre-select specific extra details to show about themselves. Player A might have a button that
links to their newsletter. Player B might have a button that links to their house, or player C to a stored record of one of their most epic games. The more versatile your system, the wider
your potential is. Finally, note that even a hyper-complex / detailed node  such as the overall box which lists lets say the top 5 ranked players and various things about them, that is STILL distinct from the scene
itself. The scene is the "Canvas" or "paper". The node is the "coin", or stack of coins. The schematic is the "instructions" for assembling and positioning the coin. The process, when needed, is the Complex
arrangement of multiple instructions / schematics, not usually needed, but there just in case. The "Factories" are the utility classes which receive schematics and load the required assets, assign 
any special functions, set initial positions, and so on.  Note that even the factories go further and use "uiLoadRequests" to load assets, and a failed "uiLoadRequest" is then tracked by the
"uiLoadRequestManager" class. That class figures out when something goes wrong, and responds accordingly - if a a critical node fails to load, the game will not crash, but will display an error UI and
may or may not submit a bug report to the development team (sigh), depending on the player's privacy settings and applicable regional laws and platform specific policies (sigh, Europe and GDPR!). 

0: Conclusion - If all of this seems like it's overkill and too complex, that's because it is - because I am very ambitious - and such features as in-game influencer pages, VR seamless compatibility,
guild lobbies, game replay systems - some of the coolest things to make a game stand out, are fundamentally difficult. You're welcome.


1. You can have multiple scenes "loaded and ready to go", but not display them, and can switch them instantly.
Very useful. The "RenderSceneSwapper" found at "ui/utilities/renderSceneSwapper.js" as of Feb 13th 2025, is the current system for handling the changing of which scenes are displayed
at a different time. Note that each scene has one or more cameras (both active and inactive) and one or more lights (active and inactive). 

I need to verify this - but I don't think there are notable performance considerations based off of the camera for inactive / non-rendered scenes. To be verified based off performance when
there are 10 scenes (various menus, mainly) pre-loaded but only 2 displayed at a time.


2. Extending scenes into a new child class is very advisable. A scene can, then, become a self-contained arrangement with specific methods that easily organize what that UI is supposed to do.

The "AchievementsUICatalogue" has a method "assembleAchievementCatalogueFoundation()". The basic names and properties of common / most in-game acheivements are public knowledge / not secret,
and thus can be pre-populated into either a JSON based system that is streamed to the client, or, for essential systems, just stored in a constructor. Being able to do both, is ideal.
An achievements UI, at a base level, is a "Catalog" which features specific achievements - specific achievements havign various
properties such as the placeholderPicture, completedPicture, in some cases possibly even a "secretUnlockPicture" or "perfectCompletionPicture". You might, theoretically, slightly change
the visual imagery when a player perfectly completes a  themed region or group of levels, versus a basic completion.

So, Achievements as a core gameplay progress system, has a corresponding UI, what I call the "AchievementsUICatalog".

The UI for Individual achievements, is what I call a "AcheivementSocket", and a socket may be empty (not yet completed) or filled (completed). Upon the game loading,
the achievements UI Catalog "prepares" itself by loading the publically known achievements into the UI. Due to the intricate nature of the various asset loading system, this happens
in a way that prevents lag / doesnt stop core gameplay. Javascript allows for this to happen without blocking the main thread via workers. Babylon asset loading is ASYNC.

So you can load the game very quickly, and load the achievements at the same time or after, and simply disable the achievements UI from being displayed / rendered until such time that it is successfully loaded.

Some sample methods for the AchievementsUICatalog - Note I don't include their full implementation below. You can look around. 

  assembleAchievementCatalogueFoundation() {} // This is the basic foundation of the achievements UI. Loads the backplate, the title, the description, the placeholder picture, etc.
  populateKnownAchievementSockets(allKnownAcievementsToLoad) {} // This is where the achievements are loaded into the UI.
  populateHiddenAchievementSockets(allHiddenAchievementsToLoad) {} // This is where the hidden achievements, which are not known to the client by default, or stored directly in a JavascriptClass are loaded into the UI.




DRAW LAYER GUIDANCE / FOOD FOR THOUGHT
/*
--------------------------------------------------
MULTIPLE DRAW LAYERS: WHEN & WHY
--------------------------------------------------

Prompt to LLM (Chat GPT o3-Mini, February 13th, 2025) 

"In what contexts might we want there to be not only two distinct UI layers, such as "Base Game UI" and "Customer Service Ticket UI" 
as a higher layer of UI / a separate scene rendered on top, but possibly even a larger number of UI Layers? 
Note that a single Scene might have different containers that are enabled and disabled at will, and have different draw orders.
 Tchnically, you can achieve the effect of modular draw order without using multiple draw layers.
  But, that is not the question. When is multiple draw layers desirable? As in, more then 2?"


Response by LLM (Chat GPT o3-Mini, February 13th, 2025) 


Context: Beyond just having a "Base Game UI" and a "Customer Service Ticket UI",
you may want several distinct draw layers to cleanly separate concerns, manage
input priorities, and handle independent update lifecycles. Here are some key contexts:

1. Modal Dialogs & Popups
   - Multiple modal windows (e.g., settings, inventory, chat, notifications)
     may need to appear over the base UI, each on its own layer to manage transitions
     and ensure proper input focus.

2. Persistent Overlays vs. Transient Elements
   - The base HUD (minimap, health bars) can live on one layer while transient
     elements like achievement popups, temporary messages, or tooltips are on another.
   - This separation simplifies fade in/out and animation management.

3. Context-Sensitive UI States
   - During gameplay, you might switch between modes (combat, dialogue, cutscene)
     that each require a dedicated layer for their unique UI elements.
   - For example, a dialogue layer might override the HUD without disturbing it.

4. Debug & Developer Tools
   - Debug overlays (FPS counters, network stats) or developer consoles can reside
     on their own layers to avoid interfering with the normal gameplay UI.

5. System & Service Interfaces
   - Beyond a customer service ticket UI, you may have error reporting, system
     notifications, or parental control interfaces that need to be rendered above
     everything else.

6. Multi-User or Split-Screen Scenarios
   - In multiplayer or split-screen setups, each player's UI might be managed on
     a separate layer to ensure correct input handling and clear visual separation.

7. Complex Transitions & Effects
   - Scene transitions or special effects (e.g., fading layers, sliding panels) may be
     implemented as separate layers to keep animations smooth and isolated.

8. VR/AR & Spatial Interfaces
   - In immersive environments, you may need distinct layers for world-anchored UI,
     floating menus, and heads-up displays, each with independent spatial transformations.

9. Accessibility Overlays
   - Special layers for accessibility enhancements (magnification, high-contrast modes)
     can be toggled without modifying the underlying UI structure.

10. Mixed Media or External Widgets
    - Integrating video playback, interactive ads, or third-party widgets may require
      their own dedicated layers to avoid conflicts with the game’s UI.

--------------------------------------------------
SUMMARY:
Using multiple draw layers is desirable when you need to separate independent
UI contexts or functionalities that:
   • Require independent input routing.
   • Need distinct update and animation cycles.
   • Should remain visually isolated for clarity and maintainability.

By organizing your UI into several layers, you can simplify management of complex
scenes, improve modularity, and provide a cleaner separation of concerns.
--------------------------------------------------
*/

